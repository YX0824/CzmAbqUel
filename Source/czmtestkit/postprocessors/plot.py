"""
    Standalone python data processing funcitons
    ===========================================
    :For use with: CZ environment 
     
    Processing data from csv files generated by odbExtract functions

"""




def UvsRFplot(U_factor=1):
    """
    :For use with: CZ environment 
     
    Processes raw data extracted from history output. Calculates and plots effective displacement and load data. Also generates a csv file with the results.

    :param  U_factor: Multipler for displacement. Useful when post processing standardized tests.
    :type U_factor: float, int
    """
    
    import pandas as pd
    import matplotlib.pyplot as plt

    data = pd.read_csv('Results_Raw.csv', header=None)
    Data = data.loc[3:]
    Ind = data.loc[0:2].values.tolist()
    Head = [[], [], []]
    for i in range(3):
        Head[i] = list(sorted(set(Ind[i]), key=Ind[i].index))
    header = pd.MultiIndex.from_product(Head, names=['Node','Output','Direction'])
    Data.columns = header
    Data = Data.astype(float)
    for i in Head[0]:
        for j in Head[1]:
            Data[i,j,'Effective'] = (Data.xs(i,level='Node',axis=1).xs(j,level='Output',axis=1)**2).sum(axis=1)**0.5
        Data[i,'U','Effective'] = U_factor*Data[i,'U','Effective']
    NodeSet = list(Data.columns.levels[0])
    Results = Data.xs('Effective',level='Direction',axis=1)   
    fig, ax = plt.subplots()
    lw = (len(NodeSet)+1)*2
    al = 1
    for i in NodeSet:
        Results.xs(i,level='Node',axis=1).plot('U', 'RF',ax=ax, linewidth=lw, alpha=al)
        lw = lw-2
    ax.legend(NodeSet)
    ax.set_xlabel('Displacement [mm]')
    ax.set_ylabel('Load [N]')
    ax.grid()
    plt.savefig('UvsRF.png')
    plt.close()
    Results.to_csv('Results.csv', index=False)